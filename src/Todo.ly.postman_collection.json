{
	"info": {
		"_postman_id": "66a4e236-b283-4f96-969f-b662e4b6377a",
		"name": "Todo.ly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User API",
			"item": [
				{
					"name": "Sign up successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get(\"email\");",
									"const fullName = pm.variables.get(\"fullName\");",
									"const password = pm.variables.get(\"password\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data in response\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    const user = jsonObject.UserObject",
									"    ",
									"    pm.expect(user.Email).to.eql(email);",
									"    pm.expect(user.FullName).to.eql(fullName);",
									"    pm.expect(user).to.not.have.property(\"Password\");",
									"    pm.expect(user).to.have.property(\"Id\");",
									"    pm.collectionVariables.set(\"userId\", user.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.collectionVariables.set(\"fullName\", pm.variables.replaceIn('{{$randomFullName}}'));",
									"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>{{email}}</Email>\n  <FullName>{{fullName}}</FullName>\n  <Password>{{password}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up user already exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Error message validation\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Account with this email address already exists\");",
									"});",
									"",
									"pm.test(\"Error code is 201\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"201\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>turboksy@gmail.com</Email>\n  <FullName>{{$randomFullName}}</FullName>\n  <Password>{{$randomPassword}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up user invalid email address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Error message validation\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid Email Address\");",
									"});",
									"",
									"pm.test(\"Error code is 201\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"307\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>user123gmail.com</Email>\n  <FullName>{{$randomFullName}}</FullName>\n  <Password>{{$randomPassword}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign up with short password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Error message validation\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Password too short\");",
									"});",
									"",
									"pm.test(\"Error code is 202\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"202\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>{{$randomEmail}}</Email>\n  <FullName>{{$randomFullName}}</FullName>\n  <Password></Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Error message correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"Not Authenticated\");",
									"});",
									"pm.test(\"Error code is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ErrorCode).to.eql(102);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "anything",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check is there token and then save\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TokenString');",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.TokenString);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.UserEmail).to.eql(email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "isAuthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User is authenticated\", function () {",
									"    pm.expect(pm.response.text()).to.eql(\"true\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Authentication/IsAuthenticated.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Authentication",
								"IsAuthenticated.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"const userId = pm.variables.get('userId');",
									"",
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Email).to.eql(email);",
									"});",
									"",
									"pm.test(\"Check user id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Id).to.eql(parseInt(userId));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/user.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user successfuly",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"newEmail\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.variables.set(\"newFullName\", pm.variables.replaceIn('{{$randomFullName}}'));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const newEmail = pm.variables.get(\"newEmail\");",
									"const newFullName = pm.variables.get(\"newFullName\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email is updated\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.UserObject.Email).to.eql(newEmail);",
									"    pm.collectionVariables.set(\"email\",newEmail)",
									"});",
									"pm.test(\"Full name is updated\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.UserObject.FullName).to.eql(newFullName);",
									"    pm.collectionVariables.set(\"fullName\",newFullName)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<UserObject> \n  <Email>{{newEmail}}</Email> \n  <FullName>{{newFullName}}</FullName>\n</UserObject>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user/0.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"0.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with new email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check is there token and then save\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TokenString');",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.TokenString);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.UserEmail).to.eql(email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/user/0.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user",
								"0.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response code is not ok', function () { ",
									"    pm.response.to.not.be.ok; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/user.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Error message validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ErrorMessage).to.eql(\"Account doesn't exist\");",
									"});",
									"",
									"pm.test(\"Error code is 201\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ErrorCode).to.eql(105);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get(\"email\");",
									"const fullName = pm.variables.get(\"fullName\");",
									"const password = pm.variables.get(\"password\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data in response\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"",
									"    pm.expect(jsonObject).to.have.property(\"UserObject\");",
									"",
									"    const user = jsonObject.UserObject;",
									"    ",
									"    pm.expect(user.Email).to.eql(email);",
									"    pm.expect(user.FullName).to.eql(fullName);",
									"    pm.expect(user).to.not.have.property(\"Password\");",
									"    pm.expect(user).to.have.property(\"Id\");",
									"    pm.collectionVariables.set(\"userId\", user.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();",
									"",
									"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.collectionVariables.set(\"fullName\", pm.variables.replaceIn('{{$randomFullName}}'));",
									"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
									"",
									"const cookieJar = pm.cookies.jar();",
									"cookieJar.clear(pm.variables.get(\"host\"), (err) => {",
									"    if (err) console.error(err)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>{{email}}</Email>\n  <FullName>{{fullName}}</FullName>\n  <Password>{{password}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check is there token and then save\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TokenString');",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.TokenString);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.UserEmail).to.eql(email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const predefinedProjectNames = [\"Work\", \"Home\", \"Study\", \"Personal\", \"Shopping List\"];",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Returns only predefined projects\", function () {",
									"    const jsonData = pm.response.json();",
									"    const projectNames = jsonData.map(project => project.Content);",
									"    pm.expect(projectNames).to.have.members(predefinedProjectNames);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/projects.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"projects.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"projectName\", pm.variables.replaceIn('{{$randomDepartment}}'));",
									"pm.collectionVariables.set(\"projectIcon\", pm.variables.replaceIn('{{$randomInt}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const projectName = pm.variables.get(\"projectName\");",
									"const projectIcon = pm.variables.get(\"projectIcon\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check created project\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    const project = jsonObject.ProjectObject;",
									"",
									"    pm.expect(project.Content).to.eql(projectName);",
									"    pm.expect(project.Icon).to.eql(projectIcon);",
									"    pm.expect(project).to.have.property(\"Id\");",
									"",
									"    pm.collectionVariables.set(\"projectId\", project.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ProjectObject>\n    <Content>{{projectName}}</Content>\n    <Icon>{{projectIcon}}</Icon>\n    <ItemType>2</ItemType>\n</ProjectObject>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/projects.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"projects.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get project by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const projectName = pm.variables.get(\"projectName\");",
									"const projectIcon = parseInt(pm.variables.get(\"projectIcon\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The name of the project is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(projectName);",
									"    pm.expect(jsonData.Icon).to.eql(projectIcon);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"itemId\", jsonData.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"ProjectId\": \"{{projectId}}\",\n    \"DueDate\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get items of a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemId = pm.variables.get(\"itemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item id is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(1);",
									"    const item = jsonData[0];",
									"    pm.expect(item.Id).to.eql(itemId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item by id as Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Checked\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items/{{itemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get done items of a project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemId = pm.variables.get(\"itemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that only 1 element is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(1);",
									"    const item = jsonData[0];",
									"    pm.expect(item.Id).to.eql(itemId);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}/DoneItems.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}",
								"DoneItems.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update project by id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"newProjectIcon\", pm.variables.replaceIn('{{$randomInt}}'));",
									"pm.collectionVariables.set(\"newProjectName\", pm.variables.replaceIn('{{$randomDepartment}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const projectId = pm.variables.get(\"projectId\");",
									"const newProjectName = pm.variables.get(\"newProjectName\");",
									"const newProjectIcon = pm.variables.get(\"newProjectIcon\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The id of the project remain the same\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.ProjectObject.Id).to.eql(projectId);",
									"});",
									"",
									"pm.test(\"The icon is updated\", function () {",
									"    var jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.ProjectObject.Icon).to.eql(newProjectIcon);",
									"    pm.collectionVariables.set(\"projectIcon\", newProjectIcon);",
									"});",
									"",
									"pm.test(\"The name is updated\", function () {",
									"    var jsonObject = xml2Json(responseBody);",
									"    pm.expect(jsonObject.ProjectObject.Content).to.eql(newProjectName);",
									"    pm.collectionVariables.set(\"projectName\", newProjectName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ProjectObject>\n    <Content>{{newProjectName}}</Content>\n    <Icon>{{newProjectIcon}}</Icon>\n</ProjectObject>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete project by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const projectName = pm.variables.get('projectName');",
									"const projectId = parseInt(pm.variables.get('projectId'));",
									"",
									"pm.test(\"The name of the deleted project is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(projectName);",
									"});",
									"",
									"pm.test(\"The id of the deleted project is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Id).to.eql(projectId);",
									"});",
									"",
									"pm.test(\"The project is marked as deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Deleted).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get items of a deleted project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There is no items\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/Projects/{{projectId}}/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Projects",
								"{{projectId}}",
								"Items.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get(\"email\");",
									"const fullName = pm.variables.get(\"fullName\");",
									"const password = pm.variables.get(\"password\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data in response\", function () {",
									"    const jsonObject = xml2Json(responseBody);",
									"    const user = jsonObject.UserObject",
									"    ",
									"    pm.expect(user.Email).to.eql(email);",
									"    pm.expect(user.FullName).to.eql(fullName);",
									"    pm.expect(user).to.not.have.property(\"Password\");",
									"    pm.expect(user).to.have.property(\"Id\");",
									"    pm.collectionVariables.set(\"userId\", user.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();",
									"",
									"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.collectionVariables.set(\"fullName\", pm.variables.replaceIn('{{$randomFullName}}'));",
									"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
									"",
									"const cookieJar = pm.cookies.jar();",
									"cookieJar.clear(pm.variables.get(\"host\"), (err) => {",
									"    if (err) console.error(err)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>{{email}}</Email>\n  <FullName>{{fullName}}</FullName>\n  <Password>{{password}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check is there token and then save\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TokenString');",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.TokenString);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.UserEmail).to.eql(email);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"projectName\", pm.variables.replaceIn('{{$randomDepartment}}'));",
									"pm.collectionVariables.set(\"projectIcon\", pm.variables.replaceIn('{{$randomInt}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"pm.collectionVariables.set(\"projectId\", jsonObject.ProjectObject.Id);",
									"pm.collectionVariables.set(\"projectName\", jsonObject.ProjectObject.Content);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<ProjectObject>\n    <Content>{{projectName}}</Content>\n    <Icon>{{projectIcon}}</Icon>\n    <ItemType>2</ItemType>\n</ProjectObject>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/projects.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"projects.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"There are no items in new project\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.empty;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"itemId\", jsonData.Id);",
									"    pm.collectionVariables.set(\"projectId\", jsonData.ProjectId)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"ProjectId\": \"{{projectId}}\",\n    \"DueDate\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"const projectId = parseInt(pm.variables.get(\"projectId\"));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Item is in correct project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ProjectId).to.eql(projectId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Items/{{itemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"const projectId = pm.variables.get(\"projectId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Item is in correct project\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ProjectId).to.eql(projectId);",
									"});",
									"",
									"pm.test(\"Item checked is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Checked).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Checked\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items/{{itemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that deleted is true\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Deleted).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Items/{{itemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create parent item ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"parentItemId\", jsonData.Id);",
									"    pm.collectionVariables.set(\"projectId\", jsonData.ProjectId)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"ProjectId\": \"{{projectId}}\",\n    \"DueDate\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create child item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"const parentId = pm.variables.get(\"parentItemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content of the item is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"childItemId\", jsonData.Id);",
									"    pm.collectionVariables.set(\"projectId\", jsonData.ProjectId)",
									"});",
									"",
									"pm.test(\"Check that parent id is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('ParentId');",
									"    pm.expect(jsonData.ParentId).to.eql(parentId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"ProjectId\": \"{{projectId}}\",\n    \"ParentId\": \"{{parentItemId}}\",\n    \"DueDate\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get root item by child id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parentId = pm.variables.get(\"parentItemId\");",
									"const childId = pm.variables.get(\"childItemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Root is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.Id).to.eql(parentId);",
									"    pm.expect(jsonData.Children[0].Id).to.eql(childId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api//Items/{{childItemId}}/RootItem.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"",
								"Items",
								"{{childItemId}}",
								"RootItem.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item parent item as Done",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Checked\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items/{{parentItemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{parentItemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get done root item by child id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const parentId = pm.variables.get(\"parentItemId\");",
									"const childId = pm.variables.get(\"childItemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Root for parent Done item is correct\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.Id).to.eql(parentId);",
									"    pm.expect(jsonData.Children[0].Id).to.eql(childId);",
									"    pm.expect(jsonData.Checked).to.be.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Items/{{childItemId}}/DoneRootItem.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{childItemId}}",
								"DoneRootItem.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filters",
			"item": [
				{
					"name": "Sign up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get(\"email\");",
									"const fullName = pm.variables.get(\"fullName\");",
									"const password = pm.variables.get(\"password\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User data in response\", function () {",
									"    const responseData = pm.response.text();",
									"    const xml = cheerio.load(responseData, {",
									"        ignoreWhitespace: true,",
									"        xmlMode: true",
									"    });",
									"    const responseEmail = xml(\"UserObject Email\").text();",
									"    const responseFullName = xml(\"UserObject FullName\").text();",
									"    const responsePassword = xml(\"UserObject Password\");",
									"    const responseId = xml(\"UserObject Id\").text();",
									"    pm.expect(responseEmail).to.eql(email);",
									"    pm.expect(responseFullName).to.eql(fullName);",
									"    pm.expect(responsePassword.length).to.eql(0);",
									"    pm.expect(responseId).not.oneOf([null, undefined]);",
									"    pm.collectionVariables.set(\"userId\", responseId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.clear();",
									"",
									"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}'));",
									"pm.collectionVariables.set(\"fullName\", pm.variables.replaceIn('{{$randomFullName}}'));",
									"pm.collectionVariables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}'));",
									"",
									"const cookieJar = pm.cookies.jar();",
									"cookieJar.clear(pm.variables.get(\"host\"), (err) => {",
									"    if (err) console.error(err)",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<UserObject>\n  <Email>{{email}}</Email>\n  <FullName>{{fullName}}</FullName>\n  <Password>{{password}}</Password>\n</UserObject>"
						},
						"url": {
							"raw": "{{url}}/api/user.xml",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user.xml"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const email = pm.variables.get('email');",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check is there token and then save\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('TokenString');",
									"    pm.collectionVariables.set(\"accessToken\", jsonData.TokenString);",
									"});",
									"",
									"pm.test(\"Check user email\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.UserEmail).to.eql(email);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "{{email}}",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/authentication/token.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"authentication",
								"token.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of filters",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const predefinedFilterNames = [\"Inbox\", \"Today\", \"Next\", \"Recycle Bin\"];",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains only predefined filters\", function () {",
									"    const jsonData = pm.response.json();",
									"    const filterNames = jsonData.map(filter => filter.Content);",
									"    pm.expect(filterNames).to.have.members(predefinedFilterNames);",
									"});",
									"",
									"pm.test(\"Select Today filter\", function () {",
									"    const todayFilter = pm.response.json().find(obj => obj.Content == \"Today\");",
									"    pm.expect(todayFilter).to.not.be.undefined;",
									"    pm.collectionVariables.set(\"todayFilterId\", todayFilter.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/filters.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"filters.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get filter by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const todayFilterId = pm.variables.get(\"todayFilterId\");",
									"",
									"pm.test(\"The name of the filter is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(\"Today\");",
									"    pm.expect(jsonData.Id).to.eql(todayFilterId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Filters/{{todayFilterId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Filters",
								"{{todayFilterId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new item for Today",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require(\"moment\");",
									"const dueDate = moment().subtract(6, \"hours\");",
									"const dueDateRequestFormat = dueDate.format(\"MM/DD/YYYY HH:mm\"); // e.g. 01/11/2021 13:02",
									"const dueDateResponseFormat = dueDate.format(\"DD MMM h:mm A\"); // e.g. 11 Jan 1:02 PM",
									"",
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));",
									"pm.collectionVariables.set(\"dueDateRequestFormat\", dueDateRequestFormat);",
									"pm.collectionVariables.set(\"dueDateResponseFormat\", dueDateResponseFormat);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"const dueDate = pm.variables.get(\"dueDateResponseFormat\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item name is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Item dueDate is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.DueDate).to.eql(dueDate);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"itemId\", jsonData.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"DueDate\": \"{{dueDateRequestFormat}}\",\n    \"DueTimeSpecified\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get items from Today filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemId = pm.variables.get(\"itemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return todays item\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(1);",
									"    const item = jsonData[0];",
									"    pm.expect(item.Id).to.eql(itemId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/Filters/-1/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Filters",
								"-1",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new item for future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require(\"moment\");",
									"const dueDate = moment().add(2, \"days\");",
									"const dueDateRequestFormat = dueDate.format(\"MM/DD/YYYY HH:mm\"); // e.g. 01/11/2021 13:02",
									"const dueDateResponseFormat = dueDate.format(\"DD MMM h:mm A\"); // e.g. 11 Jan 1:02 PM",
									"",
									"pm.collectionVariables.set(\"itemName\", pm.variables.replaceIn('{{$randomWords}}'));",
									"pm.collectionVariables.set(\"dueDateRequestFormat\", dueDateRequestFormat);",
									"pm.collectionVariables.set(\"dueDateResponseFormat\", dueDateResponseFormat);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemName = pm.variables.get(\"itemName\");",
									"const dueDate = pm.variables.get(\"dueDateResponseFormat\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item name is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.Content).to.eql(itemName);",
									"});",
									"",
									"pm.test(\"Item dueDate is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.DueDate).to.eql(dueDate);",
									"});",
									"",
									"pm.test(\"Check there is an id and save it\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('Id');",
									"    pm.collectionVariables.set(\"itemId\", jsonData.Id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Content\": \"{{itemName}}\",\n    \"DueDate\": \"{{dueDateRequestFormat}}\",\n    \"DueTimeSpecified\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get items from Next filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemId = pm.variables.get(\"itemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return future item\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(1);",
									"    const item = jsonData[0];",
									"    pm.expect(item.Id).to.eql(itemId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"type": "text",
								"value": "{{accessToken}}"
							}
						],
						"url": {
							"raw": "{{url}}/api/Filters/-5/Items.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Filters",
								"-5",
								"Items.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item is marked as checked\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.Checked).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Checked\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/Items/{{itemId}}.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Items",
								"{{itemId}}.json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get done items of the filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const itemId = pm.variables.get(\"itemId\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Return done item\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.length(1);",
									"    const item = jsonData[0];",
									"    pm.expect(item.Id).to.eql(itemId);",
									"    pm.expect(item.Checked).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Token",
								"value": "{{accessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/Filters/-5/DoneItems.json",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"Filters",
								"-5",
								"DoneItems.json"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "fullName",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": ""
		},
		{
			"key": "todayFilterId",
			"value": ""
		},
		{
			"key": "dueDateRequestFormat",
			"value": ""
		},
		{
			"key": "dueDateResponseFormat",
			"value": ""
		},
		{
			"key": "itemName",
			"value": ""
		},
		{
			"key": "itemId",
			"value": ""
		}
	]
}